Database Fragmentation: 
	-Definition : Database Fragmentation refers to the condition where the physical and logical components of a database become disorganised or scattered, leading to inefficiencies in storage utilisation,
		query performance and overall system maintenance. There are several types of Database Fragmentation 
			- Disk Fragmentaton
			- Internal Fragmmentation
			- External Fragmentation 
			- Index Fragmentation 
			- Memory Fragmentation
	- Managing Database Fragmentation :
		- Regular Maintenance 
		- Index Maintenance 
		- Proper Sizing
		- Monitoring
		- Memory Optimization
		- File System Considerations
		
	Note:- Addressing and preventing fragmentation is an ongoing process that requires careful monitoring, regular maintenance, and optimisation efforts. 
		By proactively managing fragmentation, database administrators can help ensure the efficient operation of the database system.
	
Database Migration:
	- Definition : Database migration refers to the process of transferring data, schema, and sometimes the entire database from one system or version to another.
	-  This may involve moving data between different database management systems (DBMS), upgrading to a new version of the same DBMS, or transferring data from one environment to another.
		- Primary Goals:
			- Preserving Data Integrity :  Ensuring that data remains accurate and consistent throughout the migration process.
			- Minimising Downtime :  Reducing the time during which the database is unavailable or limited in its functionality.
			- Adopting New Features : Taking advantage of new features and improvements offered by a different DBMS version or system.
			- Ensuring Compatibility :  Ensuring that the migrated data and schema are compatible with the target environment.
		
		- Key Components of Database Migrations :
			- Data Migration : Moving the actual data from the source to the target database. 
					This may involve transforming data formats, handling data types differences, and ensuring data consistency.
			- Schema Migration : Modifying the database schema to match the structure of the target database. 
					This includes creating tables, indexes, constraints, and other database objects.
			- Code Migration : Adapting and migrating the database-related application code to work with the new database. 
					This includes SQL queries, stored procedures, and other database-specific code.
			- Dependency Management : Identifying and managing dependencies between different components of the system, such as application code, stored procedures, and triggers, 
					to ensure that they function correctly after the migration.
			- Testing : Rigorous testing is a crucial part of the migration process. 
					This involves validating data integrity, checking for performance issues, and ensuring that the application works seamlessly with the new database.
		
		- Types of Database Migration : 
			- Database System Migration :  Moving from one database management system to another. For example, migrating from MySQL to PostgreSQL or from Oracle to Microsoft SQL Server.
			- Database Version Upgrade :  Upgrading to a newer version of the same database system. For example, upgrading from MySQL 5.7 to MySQL 8.0 or from PostgreSQL 9.6 to PostgreSQL 13.
			- Cloud Database Migration : Transferring a database from an on-premises environment to a cloud-based database service, or vice versa.
			- Data Center Relocation : Relocating the entire data centre, which involves moving databases and associated systems to a different physical locations.
			
		- Best Practices During Data Migration : 
			- When you are doing data migration you have to keep this points in mind - 
				- Backup Data: Before starting any migration, ensure that you have a complete backup of the data to avoid data loss in case of issues during the migration.
				- Plan and Document: Develop a detailed migration plan that includes a step-by-step process for data, schema, and code migration. Document dependencies and potential challenges.
				- Test Thoroughly: Conduct extensive testing in a controlled environment that mirrors the production environment. Test data integrity, performance, and application functionality. 
				- Rollback Plans: Have a rollback plan in case issues arise during or after migration. This ensures that you can revert to the previous state if necessary.
				- Communicate Changes: Clearly communicate the migration plan and expected downtime to relevant stakeholders. Inform users and ensure that they are aware of any disruptions.
				- Monitor Performance: Monitor database performance during and after migration. Identify and address any performance issues that may arise in the new environment. 
				- Optimise Queries: Review and optimise SQL queries and database-related code to ensure optimal performance in the new environment.
				- Iterative Approach: Consider an iterative approach, especially for large databases. Migrate smaller portions of data and validate at each step to minimize risks

		- Migration tools for manage database:
			-Flyway for java also can use with python
			-SQLAlchemy and alembic for python

Sharding in DBMS:
	- In DBMS Sharding is a type of database partitioning in which a large database is divided into smaller data and different nodes.
	- Shards are also manageable and faster.
	- Primary goal of database sharding is to distribute the load of database operations across multiple servers.
	- Allow the database to scale horizontally.
	
Need for Sharding:
	- Reduce transaction cost. when we have large number of data
	- Enable the parallel processing of smaller datasets across the shards
	
Features of Sharding:
	- Sharding makes the database smaller
	- Sharding makes the database faster
	- Sharding makes the database much more easily manageable
	- Sharding reduces the transaction cost of database
	- Failure of one shard doesn't effect the data processing of other shards
	
Benefits of Sharding:
	- Improve response time
	- Avoid total service outage
	- Scale efficiently
	
	Shards:
		- The partition data chunks are called logical shards.
		The machine that stores the logical shard is called physical shard or database node. 
		A physical shard can contain multiple logical shards.
		
		- Shard Types:
			- Range-based Sharding: Shards are defined based on a specific range of values in the shard key.
			- Hash-based Sharding: Shards are determined by applying a hash function to shard key, distributing data more evenly.
		
	Shard key:
		- Software developers use a shard key to determine how to partition the dataset.
		A column in the dataset determines which rows of data group together to form a shard.
		Database Designers choose a shard key from an existing column or create one.
		
	Shard-nothing Architecture: 
		- Shard-nothing architecture is an approach to designing distributed systems, particularly databases, where each node(shard)in the system is independent or self sufficient.
			- Key Characteristics
				-Independence of Nodes
				-Data Partitioning
				-Parallel Processing
				-Scalability
				-Fault tolerence
				-Low latency
				-Complexity of Coordination
				-Dynamic Addition and removal of nodes 
				
	Shard Coordinator - It is a component or system responsible for managing and coordinating the distribution of data across shards in a sharded database architecture.
		
		- Key functions:
		
			-Shard Assignment
			-Query Routing
			-Load Balancing
			-Metadata Management
			-Shard Failure Handling
			-Consistency Management
			-Scaling Operations
			-Connection Pooling 
			-Monitoring and Reporting
			-Security 
			-Failure Detection and Recovery
			
			
	Query Routing - Query Routing is the process of determining the appropriate destination for a database query with in a distributed or partitioned system.
	
	Data Consistency
	
	Fault Tolerence
	
	Management Overhead 
	
	Dynamic Sharding
	
	- Points to remember 
		- while doing sharding keep in mind that database should not be unbalanced.
		- A shard shouldn't contain values that might change over time. It should be static otherwise it should slowdown the process.
		
		
Sharding Architectures
	

	- Key Based Sharding - 
		-Key Based Sharding - this is also known as hash-based sharding, is a database sharding strateg where data is distributed across multiple shards based on a specific key or set of keys.
			the purpose of key-based sharding is to evenly distribute the data among the shards, preventing hotspots and optimising both read and write operations.
			Each shard is responsible for specific range or hash value of the sharding key
		
	-Horizontal or Range Based Sharding :
		-Horizontal Sharding - Horizontal sharding involves dividing a large dataset into smaller partitions or shards where each shard contains a subset of the data.
		
			-Key Characteristics
				-Each shard operates as a separate database instance.
				-Shards are typically defined by rows or ranges of rows in a table.
				- The goal is to distribute the data horizontally across the multiple servers and nodes.
				-Commonly used to improve scalability and parallelise operations.
			-Use Cases 
				-Distributing data across multiple servers to handle a large number of users.
				-Improving write and read performance by parallelising operations across shards.
				
		-Range-based Sharding - Range-baed sharding is a specific type of horizontal sharding where data is divided based on specific ranges of a chosen sharding key.
		
			-Key Characteristics
				-Shards are defined based on specific ranges and values in a chosen column( date ranges, numerical ranges)
				-Commonly used when there's a natural order or hierarchy in the data that can be leveraged for sharding.
				-Allows for efficient querying of specific ranges of data.
			-Use Cases
				-Storing time series data where each shard represents a specific time period.
				- Distributing data on numerical ranges for load balancing.
		Note: This combination allows for both horizontal scalability across multiple servers and efficient range-based querying within each shard.
		
		-Vertical Sharding:
			-Vertical sharding also known as functional sharding or column based sharding,is a database sharding strategy where data is divided vertically, meaning that different columns of tableare distributed across multiple database instances and shards.
			-Vertical sharding involves splitting the columns.
			
		-Directory-Based Sharding:
				-Directory-based shardingis a sharding strategy where data isdistributed and organized across different directories or file systems based on specific criterion.
				 this approach is often employed in scenarios where the underlying storage infrastructure provides a hierarchical file system or directory structure that can be leveraged for distributing and managing data.
				 
				
				-There are some key concepts of the directory based sharding:
					- Hierarchical Organisation: Directory-based sharding relies on the hierarchical organisation of data into directories or folders. Each directory may represent a shard or a subset of data based on certain criteria.
					- Sharding Criteria - Sharding decisions are made based on specific criteria that determine how data is distributed across directories. Common criteria include range-based values, categorical attributes, or other characteristics relevant to the application.
					- Directory Naming Conventions - Naming conventions for directories often reflect the sharding criteria or key. For example, if sharding is based on date ranges, directories may be named with corresponding date values.
					- Effective Querying - Directory-based sharding can provide efficient querying for operations that involve specific sharding criteria. Retrieving data within a specific directory or a set of directories can be faster than scanning the entire dataset.
					
					
					
					
Multi-Tenant Application Database Design :
	- Definition : Multitenancy in DBMS refers to the capability of a database to efficiently and securely serve multiple tenants, where each tenant is an independent entity 	with its own set of data and schema. 
		In a multi-tenant DBMS, tenant maybe individual users, organisations, or applications that share the same underlying database infrastructure while remaining isolated from each other. 
		The goal is to provide a cost effective and scalable solution for managing data for multiple entities.
		
	- Key Characteristics of Multi-tenancy:
		- Isolation : Tenants are logically isolated from each other, meaning that the data of one tenant is not directly accessible or visible to another. 
			This isolation is crucial for maintaining data privacy and security.
		- Shared Infrastructure : Multiple tenants share the same physical or virtual database infrastructure. 
			This shared resource model helps optimise resource utilisation and reduces costs compared to maintaining separate databases for each tenant
		- Schema Separation : Each tenant typically has its own schema within the shared database. 
			This separation can be achieved by using different tables, views, or schemas for each tenant to ensure data integrity and prevent cross-tenant data access.
		- Security Measures : Robust security measures are implemented to ensure that tenants are authenticated, authorised, and that their data remains confidential. 
			Access controls are enforced to prevent unauthorised access to tenant data.
		- Scalability : Multi-tenancy is designed to scale efficiently as the number of tenants grows. 
			This scalability can be achieved through horizontal scaling, sharding, or other strategies to distribute the load across multiple nodes.
			
	- Models of Multi-tenancy in DBMS : 
		- Shared Database, Shared Schema : Tenants share the same database and schema, and their data is distinguished by a unique identifier within shared tables.
		- Shared Database, Separate Schema : Tenants share the same database but have separate schemas, either within the same database or in separate databases.
		- Separate Database : Each tenant has its own dedicated database, providing the highest level of isolation but potentially increasing infrastructure overhead.
		
	- Use Cases :
		- Software as a Service Applications : Many SaaS applications leverage multi-tenancy to efficiently serve multiple customers with a shared application instance and database.
		- Enterprise Applications : Large enterprises may use multi-tenancy to manage data for different departments, business units, or subsidiaries within a centralised database.
		- Cloud Services : Cloud database services often provide multi-tenant architecture to optimise resource utilisation and provide cost-effective solutions for multiple users.
		
		