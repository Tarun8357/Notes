														JAVA
 
Java is a programming language and a platform also a high level, robust, object-oriented programming language 

	1. Developed by SUN MICROSYSTEMS
	

APPLICATIONS OF JAVA 

	1. Desktop Applications such as acrobat reader etc.
	2. Web Applications such as Arctic
	3. Enterprise Applications such as banking applications.
	4. Mobile 
	5. Embedded System
	6. Robotics

TYPES OF JAVA APPLICATIONS

	1. Standalone Application
	2. Web Application
	3. Enterprise Application
	4. Mobile Application
	
Java Platforms 

	1. Java SE (Java  Standard  Edition)
	2. Java EE (Java Standard Edition)
	3. Java  ME (Java Micro Edition)
	4. Java FX

Important Features of Java Language
	
	1. Object Oriented 
	2. Simple - Java considered as simple due to Clear Syntax, Object-Oriented Approach, Automatic Memory Management, Platform Independence, Standard Library (API), Strong Typing, No Explicit Pointers, No Operator overloading, Robust Exception Handling, Community Documentation.
	3. Secured - Java is often considered as a secure programming language due to several features and design choices that help prevent common security vulnerabilities.
			1. Byte Code Compilation and Java Virtual Machine 
			2. Platform Independence 
			3. Security Manager 
			4. ClassLoaders (provide isolation between classes, load classes at runtime, helping to prevent unauthorized access to sensitive resources.)
			5. Automatic Memory Management 
			6. Exception Handling
			7.Security APIs
			8. Standardised Security Protocols 
		
	4. Platform Independent  - Java achieve platform independence through the combination of two key features: the Java Virtual Machine (JVM) and then use of Byte Code 
	5. Robust 
	6. Portable 
	7. Architectural Neutral
	8. Dynamic 
	9. Interpreted
	10. High Performance 
	11. Multithreaded
	12. Distributed

STEP BY STEP WORKING JAVA VIRTUAL MACHINE 


	STEP 1 : Compilation of Java Source Code 
			1. Java Source Code : Developers write java source code in the plain text file with .java extension 
			2. Compilation : The Java Compiler (javac)  is used to compile the source code into byte code . Byte code is the intermediate representation of the program and saved with .class extension.

	
	STEP 2 : Class Loading 
			1. Class loader : Class loader is responsible for loading the classes into the JVM. There are three main steps : loading, linking and initiialization.
			A. Loading : The class loader loads and compiled classes into JVM from various sources, such as the local file system network or custom sources.
			B. Linking : 
					Verification : Bytecode undergoes verification to ensure adherence to java language specifications and security constraints.
					Preparation :  Memory is allocated for a class variables and initialised to default values.
					Resolution : Symbolic references are replaced with direct references to memory locations.
			C. Initialisation : Static variables are initialised and static initialisation blocks are executed.

	STEP 3 : Bytecode Verification : 
			1. Before execution, the JVM performs byte code verification to ensure the code’s safety and integrity.
			2.  This process checks for illegal byte code and potential security vulnerabilities.
			3. If verification fails, the JVM refuses to execute the code .

	STEP 4 : Executed Engine :
			1. The execution engine interprets and executes Java bytecode. Two main approaches are used : 

					Interpreter : Translates byte code into machine code instructions and executes them one by one.

					Just-In-Time(JIT)Compilation : Some JVMs use a JIT compiler to translate byte code  into native machine code at runtime, improving execution speed.

	STEP 5 : Runtime Data Areas : 
			Memory Management : 
					1. The JVM manages various runtime data areas, including : 
						A. Method Area : Store class metadata, static variables, method information.
						B. Heap : Memory area for objects and dynamic data.
						C. Stack : Each thread has its own stack for storing local variables and method call information.
						D. Program Counter (PC) : Keeps track of the current instruction being executed.

	STEP 6 : Garbage Collections :
			1. Garbage Collection : 
						A. The JVM includes a garbage collector to reclaim memory occupied by objects that are no longer reachable.
						B. Automatic memory management prevents memory leaks and improves program stability.

	STEP 7 : Native Interface :

			1. Java Native Interface (JNI) : 
						A. JNI allows Java code to interact with native applications and libraries written in languages like C and C++.
						B. Enables interoperability between Java and native code.

	
	STEP  8 : Execution Termination : 

			1. The program execution ends when the main method finishes or when the System.exit() method called.

Note : In summary the JVM provides a platform-independent execution environment for Java programs. It starts with the compilation of source code into byte code, followed by class loading, byte code verification and execution by the execution engine. Memory management, including garbage collection, ensures proper resource utilisation and the Java Native Interface allows interaction with native code if needed.


														

														APACHE TOMCAT 


Apache Tomcat is referred to as Tomcat, is an open-source web server and servlet container developed by the Apache Software Foundation. It implements several Java EE(Enterprise Edition) specifications and provides a robust environment for running Java-based technologies used for building dynamic web applications


		1. Servlet Container : Tomcat primarily functions as a servlet container, which means it implements the Java Servlet and Java Server Pages  (JSP) specification. Servlets and JSPs are Java-based technologies used for dynamic web applications.

		2. Open Source : Tomcat is open-source and released under the Apache License, making it freely available for download, use, and modification.

		3. HTTP Server : While Tomcat is commonly used as a servlet container, it also has built-in support for handling HTTP requests. It can act as a standalone HTTP server, serving static content and handling dynamic content through servlets and JSPs. 

		4. Java Platform : Tomcat is written in Java. and it provides a platform- independent environment for running Java web applications. It is compatible with various operating systems, including Windows, Linux and macOS.

		5. Components : Tomcat consists of several components, including Catalina (servlet container), Coyote(HTTP connector ), Jasper (JSP Engine) and more. These components work together to provide a complete web server and servlet container solution.

		6. Connectors : Tomcat supports multiple connectors , allowing it to communicate with different web servers and protocols. The most  common connector is the Coyote Connector, which enables Tomcat to handle HTTP requests.
		
		7. Embedded Tomcat : Tomcat can be embedded within other applications, allowing developers to include a servlet container directly in their Java applications. This is useful for standalone applications that need to serve web content.
	
		8. Management and Administration : Tomcat  provides a web-based  administration interface, known as the tomcat manager, which allows administrators to deploy, undeploy and manage web applications. This interface is accessible through a web browser.

		9. Clustering and Load Balancing : Tomcat supports clustering, allowing multiple Tomcat instances to work together to distribute the load and improve application availability. It also supports integration with external load balancers. 

	FOLDER STRUCTURE OF TOMCAT :
			The folder structure of Apache Tomcat is organised in a way that separates configuration files, web applications, libraries, and other resources.

			1. bin/ : contains exectable files and scripts for starting and stopping Tomcat.
					- catalina.sh  or catalina.bat : Script for starting and stopping the Tomcat server.
					- other scripts for various purposes like startup.sh or startup.bat and shutdown.sh or shutdown.bat.

			2. conf/ : contains configuration files for tomcat 
					- server.xml : main configuration file for the tomcat server.
					- web.xml : configuration file for the default settings of web applications
					- catalina.policy , catalina.properties : security- related configuration files.
					- Various XML files for configuration specific services and connectors.

			3. lib/ : contains Java Archive (JAR) files that tomcat uses.
					- JAR files for Tomcat’s internal fucntionality and dependencies.
					- Additional JAR files can be placed here for shared libraries.

			4. logs/ : Logs file generated by tomcat.
					- catalina.out or catalina.log : standard output and error logs.
					- other logs for access, error, and other events.

			5. temp/ : temporary files used by the tomcat.
					- temporary files, such as those generated during deployment or compilation.

			6. webapps/ : this is where you deploy your web applications.
					- each subdirectory represents a deployed web application.
					- the ROOT directory is typically used for the default application.

			7. work/ : temporary working directory for tomcat.
					- Java classes generated from JSP files are stored here. 
					- Temporary files used by Tomcat for various purposes.

			8. conf/Catalina/localhost/ : this directory contains XML context configurations files for individual web applications.
					- Each XML file corresponds to a deployed web application and provides context-specific configuration.

			9. logs/ : Log files generated by tomcat.
					- localhost_access_log.txt : Access log for web applications.
					- Other logs specific to individual applications.

			10. temp/ : temporary files used by tomcat.
					- Application-specific temporary files. 

			 
After deploying the web-application on the tomcat the further actions performed by the tomcat :
			1. Web-Application Deployment : 
				1.1 : Placement in ‘web apps’ Directory : The web application, in the form of a WAR (web application archive ) file or an unpacked directory, is placed in the ‘webapps’ directory of the Tomcat installation.
				1.2 : Auto- Deployment (Optional ) : Tomcat monitors the web apps directory for changes. If automatic deployment is enabled, Tomcat automatically deploys the application upon detecting changes.
				1.3 : Deployment Descriptor (web.xml) : Tomcat reads the deployment descriptor (web.xml) to understand the structure and configurations of the web application.
				1.4 : Context Path : The context path of the web application is determined based on the directory name or the WAR file name (without the extension) and is used I the url to the access the application.

			2. Class  Loading and Initialisation : 
				2.1 : Class Loading : Tomcat’s class loader loads classes from the ‘WEB-INF/classes’ directory and JAR files in the ‘WEB-INF/lib’ directory of the web application.
				2.2 : Initiliazation : Servlets, filters and other components specified in the deployment descriptor are instantiated and initialised.

			3. Request Handling : 
				3.1 : Client Request : When a client (web browser or other HTTP client ) sends a request, It is received by Tomcat’s connectors.
				3.2 : Connector : The connector, configured in the ‘server.xml’ file processes the incoming request. The default connector is typically an HTTP connector listening on the port 8080.

			4. Catalina Container : 
				4.1 : Catalina : The catalina container is responsible for managing the servlet container (engine) and handling the life cycle of the web applications. 

				4.2 : Request Processing : The Catalina container processes the incoming request and determines which web application (context) should handle it based on the context path.

			5. Web Application Context : 
				5.1 : Context : Tomcat creates a separate context for each deployed web application. The context contains information about the web application, including its configuration, class loader and resources. 
				5.2 : Servlet Mapping : The context uses the servlet mapping defined in the deployment descriptor to route the request to the appropriate servlet resource.

			6. Servlet Execution : 
				6.1 : Servlet Execution :	 If the request corresponds to a servlet, the servlet container executes the servlet’s ‘service()’ method, which generates the response.
				6.2 : Filter Execution (Optional) : If filters are configured in the deployment descriptor, they are executed before and after the servlet allowing for pre-processing and post-processing of requests and responses.

			7. Response Generation :
				7.1 : Response Generation : The servlet generates an HTTP response, which includes headers and the response body.
				7.2 : Content Type and Encoding : The content type and character encoding specified in the servlet’s response are used to format the response.

			8. Tomcat Connector : 
				8.1 : Connector : The Tomcat connector sends the generated response back to the client over the network.
				8.2 : Client Response : The client receives the response and renders it based on the content received .

			9. Session Management : 
				9.1 : Session Tracking : If the web application uses sessions, Tomcat manages session tracking and maintains session state falls for clients.

			10. Logging and monitoring :  
				10.1 : Logging : Tomcat logs various events, errors and access information. Log files can be be found in the ‘logs’ directory.
				10.2 : Monitoring : Administrators can Monitor Tomcat using tools like the Tomcat Manager and review log files for diagnostics.

			11. Undeployment : 
				11.1 : Undeployment : 
						- To undeploy a web-application, remove its directory or WAR file from the ‘webapps’ directory.
						- Tomcat automatically undeploys the application and releases its resources.

This process continues as tomcat handles subsequent requests and manages the lifecycle of deployed web applications. It’s important to note that this is a simplified overview and Tomcat’s modular architecture provides flexibility for customisation, extension, and integration with various technologies.